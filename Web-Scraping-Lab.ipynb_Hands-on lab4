{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"text-align:center\">\n",
    "    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDA0321ENSkillsNetwork928-2022-01-01\" target=\"_blank\">\n",
    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\"  />\n",
    "    </a>\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Hands-on Lab : Web Scraping**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Estimated time needed: **30 to 45** minutes\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objectives\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this lab you will perform the following:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Extract information from a given web site \n",
    "* Write the scraped data into a csv file.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract information from the given web site\n",
    "You will extract the data from the below web site: <br> \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#this url contains the data you need to scrape\n",
    "url = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/labs/datasets/Programming_Languages.html\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data you need to scrape is the **name of the programming language** and **average annual salary**.<br> It is a good idea to open the url in your web broswer and study the contents of the web page before you start to scrape.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import the required libraries\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Your code here\n",
    "from bs4 import BeautifulSoup # this module helps in web scrapping.\n",
    "import requests  # this module helps us to download a webpage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Download the webpage at the url\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Webpage downloaded successfully as 'downloaded_page.html'\n"
     ]
    }
   ],
   "source": [
    "#your code goes here\n",
    "\n",
    "# Specify the URL\n",
    "url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/labs/datasets/Programming_Languages.html'  # Replace with the actual URL\n",
    "\n",
    "# Send a GET request to the URL\n",
    "response = requests.get(url)\n",
    "\n",
    "# Check if the request was successful\n",
    "if response.status_code == 200:\n",
    "    # Save the page content to a file\n",
    "    with open('downloaded_page.html', 'w', encoding='utf-8') as file:\n",
    "        file.write(response.text)\n",
    "    print(\"Webpage downloaded successfully as 'downloaded_page.html'\")\n",
    "else:\n",
    "    print(f\"Failed to download webpage. Status code: {response.status_code}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a soup object\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Soup object created successfully\n"
     ]
    }
   ],
   "source": [
    "#your code goes here\n",
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "\n",
    "# Specify the URL\n",
    "url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/labs/datasets/Programming_Languages.html'  # Replace with the actual URL\n",
    "\n",
    "# Send a GET request to the URL\n",
    "response = requests.get(url)\n",
    "\n",
    "# Check if the request was successful\n",
    "if response.status_code == 200:\n",
    "    # Create a BeautifulSoup object\n",
    "    soup = BeautifulSoup(response.content, 'html.parser')\n",
    "    print(\"Soup object created successfully\")\n",
    "else:\n",
    "    print(f\"Failed to retrieve webpage. Status code: {response.status_code}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scrape the `Language name` and `annual average salary`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save the scrapped data into a file named *popular-languages.csv*\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Language: Language ---> Average Annual Salary: Average Annual Salary\n",
      "Language: Python ---> Average Annual Salary: $114,383\n",
      "Language: Java ---> Average Annual Salary: $101,013\n",
      "Language: R ---> Average Annual Salary: $92,037\n",
      "Language: Javascript ---> Average Annual Salary: $110,981\n",
      "Language: Swift ---> Average Annual Salary: $130,801\n",
      "Language: C++ ---> Average Annual Salary: $113,865\n",
      "Language: C# ---> Average Annual Salary: $88,726\n",
      "Language: PHP ---> Average Annual Salary: $84,727\n",
      "Language: SQL ---> Average Annual Salary: $84,793\n",
      "Language: Go ---> Average Annual Salary: $94,082\n"
     ]
    }
   ],
   "source": [
    "table = soup.find('table') \n",
    "# your code goes here\n",
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "\n",
    "# Specify the URL\n",
    "url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/labs/datasets/Programming_Languages.html'  # Replace with the actual URL containing the table\n",
    "\n",
    "# Send a GET request to the URL\n",
    "response = requests.get(url)\n",
    "\n",
    "# Check if the request was successful\n",
    "if response.status_code == 200:\n",
    "    # Create a BeautifulSoup object\n",
    "    soup = BeautifulSoup(response.content, 'html.parser')\n",
    "\n",
    "    # Find the first <table> in the HTML\n",
    "    table = soup.find('table')\n",
    "\n",
    "    # Ensure that the table exists\n",
    "    if table:\n",
    "        # Initialize lists to hold the data\n",
    "        languages = []\n",
    "        salaries = []\n",
    "\n",
    "        # Iterate over each row in the table\n",
    "        for row in table.find_all('tr'):\n",
    "            # Get all columns in each row\n",
    "            cols = row.find_all('td')\n",
    "\n",
    "            # Check if there are enough columns\n",
    "            if len(cols) > 3:  # Ensure there are at least 4 columns\n",
    "                language_name = cols[1].get_text(strip=True)  # Language is in the 2nd column\n",
    "                average_salary = cols[3].get_text(strip=True)  # Average Annual Salary is in the 4th column\n",
    "                \n",
    "                # Append to lists\n",
    "                languages.append(language_name)\n",
    "                salaries.append(average_salary)\n",
    "\n",
    "        # Print the results\n",
    "        for language, salary in zip(languages, salaries):\n",
    "            print(f\"Language: {language} ---> Average Annual Salary: {salary}\")\n",
    "    else:\n",
    "        print(\"No table found on the webpage.\")\n",
    "else:\n",
    "    print(f\"Failed to retrieve webpage. Status code: {response.status_code}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data saved to popular-languages.csv\n"
     ]
    }
   ],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "import csv\n",
    "\n",
    "# Specify the URL\n",
    "url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/labs/datasets/Programming_Languages.html'  # Replace with the actual URL containing the table\n",
    "# Send a GET request to the URL\n",
    "response = requests.get(url)\n",
    "\n",
    "# Check if the request was successful\n",
    "if response.status_code == 200:\n",
    "    # Create a BeautifulSoup object\n",
    "    soup = BeautifulSoup(response.content, 'html.parser')\n",
    "\n",
    "    # Find the first <table> in the HTML\n",
    "    table = soup.find('table')\n",
    "\n",
    "    # Ensure that the table exists\n",
    "    if table:\n",
    "        # Initialize lists to hold the data\n",
    "        languages = []\n",
    "        salaries = []\n",
    "\n",
    "        # Iterate over each row in the table\n",
    "        for row in table.find_all('tr'):\n",
    "            # Get all columns in each row\n",
    "            cols = row.find_all('td')\n",
    "\n",
    "            # Check if there are enough columns\n",
    "            if len(cols) > 3:  # Ensure there are at least 4 columns\n",
    "                language_name = cols[1].get_text(strip=True)  # Language is in the 2nd column\n",
    "                average_salary = cols[3].get_text(strip=True)  # Average Annual Salary is in the 4th column\n",
    "                \n",
    "                # Append to lists\n",
    "                languages.append(language_name)\n",
    "                salaries.append(average_salary)\n",
    "\n",
    "        # Save the results to a CSV file\n",
    "        with open('popular-languages.csv', mode='w', newline='') as file:\n",
    "            writer = csv.writer(file)\n",
    "            # Write the header\n",
    "            writer.writerow(['Language', 'Average Annual Salary'])\n",
    "            # Write the data\n",
    "            for language, salary in zip(languages, salaries):\n",
    "                writer.writerow([language, salary])\n",
    "        \n",
    "        print(\"Data saved to popular-languages.csv\")\n",
    "    else:\n",
    "        print(\"No table found on the webpage.\")\n",
    "else:\n",
    "    print(f\"Failed to retrieve webpage. Status code: {response.status_code}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Authors\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ramesh Sannareddy\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Other Contributors\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Rav Ahuja\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Change Log\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|  Date (YYYY-MM-DD) |  Version | Changed By  |  Change Description |\n",
    "|---|---|---|---|\n",
    "| 2020-10-17  | 0.1  | Ramesh Sannareddy  |  Created initial version of the lab |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Copyright &copy; 2020 IBM Corporation. This notebook and its source code are released under the terms of the [MIT License](https://cognitiveclass.ai/mit-license/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDA0321ENSkillsNetwork928-2022-01-01).\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
